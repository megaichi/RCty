{"ast":null,"code":"var _jsxFileName = \"/Users/megataichi/React/react-practice/moz-todo-react/src/App.js\";\nimport React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Form from \"./components/Form\";\nimport FileButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n\n  function toggleTaskComplkeated(id) {\n    console.log(tasks[0]);\n  } // function toggleTaskCompleted(id) {\n  //   const updatedTasks = tasks.map(task => {\n  //     // if this task has the same ID as the edited task\n  //     if (id === task.id) {\n  //       // use object spread to make a new object\n  //       // whose `completed` prop has been inverted\n  //       return {...task, completed: !task.completed}\n  //     }\n  //     return task;\n  //   });\n  //   setTasks(updatedTasks);\n  // }\n\n\n  const taskList = tasks.map(task => /*#__PURE__*/React.createElement(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    key: task.id,\n    toggleTaskComplkeated: toggleTaskComplkeated,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }));\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  function addTask(name) {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todoapp stack-large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    addTask: addTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filters btn-group stack-exception\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FileButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FileButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(FileButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"list>-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, headingText), /*#__PURE__*/React.createElement(\"ul\", {\n    role: \"list\",\n    className: \"todo-list stack-large stack-exception\",\n    \"aria-labelledby\": \"list-heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, taskList));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/megataichi/React/react-practice/moz-todo-react/src/App.js"],"names":["React","useState","nanoid","Form","FileButton","Todo","App","props","tasks","setTasks","toggleTaskComplkeated","id","console","log","taskList","map","task","name","completed","tasksNoun","length","headingText","addTask","newTask"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,QAAvB;AAEA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;;AAGA,SAASC,GAAT,CAAaC,KAAb,EAAmB;AACjB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAACM,KAAK,CAACC,KAAP,CAAlC;;AAEA,WAASE,qBAAT,CAA+BC,EAA/B,EAAmC;AACjCC,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAK,CAAC,CAAD,CAAjB;AACD,GALgB,CAOjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAMM,QAAQ,GAAGN,KAAK,CAACO,GAAN,CAAUC,IAAI,iBAC7B,oBAAC,IAAD;AACI,IAAA,EAAE,EAAEA,IAAI,CAACL,EADb;AAEI,IAAA,IAAI,EAAEK,IAAI,CAACC,IAFf;AAGI,IAAA,SAAS,EAAED,IAAI,CAACE,SAHpB;AAII,IAAA,GAAG,EAAEF,IAAI,CAACL,EAJd;AAKI,IAAA,qBAAqB,EAAED,qBAL3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADe,CAAjB;AAWA,QAAMS,SAAS,GAAGL,QAAQ,CAACM,MAAT,KAAoB,CAApB,GAAwB,OAAxB,GAAkC,MAApD;AAEA,QAAMC,WAAW,GAAI,GAAEP,QAAQ,CAACM,MAAO,IAAGD,SAAU,YAApD;;AAGA,WAASG,OAAT,CAAiBL,IAAjB,EAAuB;AACrB,UAAMM,OAAO,GAAG;AAAEZ,MAAAA,EAAE,EAAE,UAAUT,MAAM,EAAtB;AAA0Be,MAAAA,IAAI,EAAEA,IAAhC;AAAsCC,MAAAA,SAAS,EAAE;AAAjD,KAAhB;AACAT,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWe,OAAX,CAAD,CAAR;AACD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,OAAO,EAAED,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAK,IAAA,SAAS,EAAC,mCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CAFF,eAOE;AAAI,IAAA,EAAE,EAAC,eAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBD,WAAxB,CAPF,eAQE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,SAAS,EAAC,uCAFZ;AAGE,uBAAgB,cAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGP,QALH,CARF,CADF;AAkBD;;AAED,eAAeR,GAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nimport Form from \"./components/Form\";\nimport FileButtonã€€from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\n\n\nfunction App(props){\n  const [tasks, setTasks] = useState(props.tasks);\n\n  function toggleTaskComplkeated(id) {\n    console.log(tasks[0])\n  }\n\n  // function toggleTaskCompleted(id) {\n  //   const updatedTasks = tasks.map(task => {\n  //     // if this task has the same ID as the edited task\n  //     if (id === task.id) {\n  //       // use object spread to make a new object\n  //       // whose `completed` prop has been inverted\n  //       return {...task, completed: !task.completed}\n  //     }\n  //     return task;\n  //   });\n  //   setTasks(updatedTasks);\n  // }\n\n  const taskList = tasks.map(task => (\n    <Todo\n        id={task.id}\n        name={task.name}\n        completed={task.completed}\n        key={task.id}\n        toggleTaskComplkeated={toggleTaskComplkeated}\n      />\n    )\n  );\n  \n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  \n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n  \n\n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n \n  return (\n    <div className=\"todoapp stack-large\">\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">\n        <FileButton />\n        <FileButton />\n        <FileButton />\n      </div>\n      <h2 id=\"list>-heading\">{headingText}</h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n       >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}