{"ast":null,"code":"var _jsxFileName = \"/Users/megataichi/React/react-practice/moz-todo-react/src/App.js\";\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\n\nfunction App(props) {\n  // const editFieldRef = useRef(null);\n  // const editButtonRef = useRef(null);\n  const [filter, setFilter] = useState('All');\n  const [tasks, setTasks] = useState(props.tasks); //\n\n  const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  }; //\n\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  } //　タスクを消します\n\n\n  function deleteTask(id) {\n    const remaininngTasks = tasks.filter(task => id !== task.id);\n    setTasks(remaininngTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      if (id === task.id) {\n        return { ...task,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/React.createElement(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    key: task.id,\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }));\n  const filterList = FILTER_NAMES.map(name => /*#__PURE__*/React.createElement(FilterButton, {\n    key: name,\n    name: name,\n    isPressed: name === filter,\n    setFilter: setFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }));\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  function addTask(name) {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  const listHeadingRef = useRef(null);\n  const prevTaskLength = usePrevious(tasks.length);\n  useEffect(() => {\n    if (tasks.length - prevTaskLength === -1) {\n      listHeadingRef.current.focus();\n    }\n  }, [tasks.length, prevTaskLength]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"todoapp stack-large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    addTask: addTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filters btn-group stack-exception\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, filterList), /*#__PURE__*/React.createElement(\"h2\", {\n    id: \"list-heading\",\n    tabIndex: \"-1\",\n    ref: listHeadingRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, headingText), taskList);\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/megataichi/React/react-practice/moz-todo-react/src/App.js"],"names":["React","useState","useRef","useEffect","nanoid","Form","FilterButton","Todo","App","props","filter","setFilter","tasks","setTasks","FILTER_MAP","All","Active","task","completed","Completed","FILTER_NAMES","Object","keys","toggleTaskCompleted","id","updatedTasks","map","deleteTask","remaininngTasks","editTask","newName","editedTaskList","name","taskList","filterList","tasksNoun","length","headingText","addTask","newTask","listHeadingRef","prevTaskLength","usePrevious","current","focus"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nimport Form from \"./components/Form\";\nimport FilterButton　from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\n\n\nfunction App(props){\n  // const editFieldRef = useRef(null);\n  // const editButtonRef = useRef(null);\n  \n  const [filter, setFilter] = useState('All');\n\n  const [tasks, setTasks] = useState(props.tasks);\n  //\n  const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  };\n  //\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n\n　function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      \n      if (id === task.id) {\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  //　タスクを消します\n  function deleteTask(id) {\n    const remaininngTasks = tasks.filter(task => id !== task.id);\n    setTasks(remaininngTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      if (id === task.id) {\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList)\n  }\n\n  const taskList = tasks\n    .filter(FILTER_MAP[filter])\n    .map(task => (\n    <Todo\n      id={task.id}\n      name={task.name}\n      completed={task.completed}\n      key={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask={deleteTask}\n      editTask={editTask}\n    />\n  ));\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n  \n  function addTask(name) {\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  }\n\n  const listHeadingRef =　useRef(null);\n  const prevTaskLength = usePrevious(tasks.length);\n\n  useEffect(() => {\n    if (tasks.length - prevTaskLength === -1) {\n      listHeadingRef.current.focus();\n    }\n  }, [tasks.length, prevTaskLength]);\n \n  return (\n    \n    <div className=\"todoapp stack-large\">\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">\n        {filterList}\n      </div>\n\n      {/* <h2 id=\"list>-heading\">{headingText}</h2> */}\n      <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\n        {headingText}\n      </h2>\n\n      {taskList }\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}